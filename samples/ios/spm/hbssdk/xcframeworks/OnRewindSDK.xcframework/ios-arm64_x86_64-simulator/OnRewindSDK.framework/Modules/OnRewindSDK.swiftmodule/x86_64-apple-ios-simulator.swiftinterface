// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.6 (swiftlang-5.6.0.323.62 clang-1316.0.20.8)
// swift-module-flags: -target x86_64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -module-name OnRewindSDK
import AVFoundation
import AVKit
import Accelerate
import CommonCrypto
import CoreGraphics
import CoreImage
import Darwin
import Dispatch
import Foundation
import ImageIO
import MediaPlayer
import MobileCoreServices
import ObjectiveC
import OnRewindSDK_Private
import QuartzCore
import SportBuff
import Swift
import SystemConfiguration
import UIKit.UIFont
import UIKit.UIGestureRecognizerSubclass
import UIKit.UIImage
import UIKit
import WebKit
import _Concurrency
extension Swift.Bool {
  public static var encoding: Swift.String.Encoding {
    get
  }
}
infix operator ~== : ComparisonPrecedence
infix operator ~!= : ComparisonPrecedence
extension Swift.String : Swift.Error {
}
infix operator |> : AdditionPrecedence
public protocol OnRewindErrorWithMessage : Swift.Error {
  var message: Swift.String { get }
  var isRecoverableError: Swift.Bool { get }
}
public protocol OnRewindEmbeddedController {
  func toFullscreen(richPlayback: Swift.Bool)
  func play()
  func pause()
  func stop()
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class OnRewind : ObjectiveC.NSObject {
  public enum EventParams : Swift.Equatable {
    case videoStream(Foundation.URL, isLive: Swift.Bool)
    case configurationURL(Foundation.URL, accountKey: Swift.String)
    case eventId(Swift.String, accountKey: Swift.String)
    public static func == (a: OnRewindSDK.OnRewind.EventParams, b: OnRewindSDK.OnRewind.EventParams) -> Swift.Bool
  }
  public enum PlayerUIEvent : Swift.Equatable {
    case closed
    case goLive
    case recoverError
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: OnRewindSDK.OnRewind.PlayerUIEvent, b: OnRewindSDK.OnRewind.PlayerUIEvent) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public typealias PipStoreStateClosure = OnRewindSDK.WrapperVoidClosure
  public typealias PipRestoreStateClosure = (@escaping OnRewindSDK.WrapperVoidClosure) -> ()
  public typealias PlayerWrapperClosure = () -> (OnRewindSDK.PlayerWrapper)
  public typealias PlayerUIEventsClosure = (OnRewindSDK.OnRewind.PlayerUIEvent) -> ()
  public typealias PlayerAnalyticsEventsClosure = (OnRewindSDK.OnRewind.Analytics.Event) -> ()
  @objc public static var pipStoreState: OnRewindSDK.OnRewind.PipStoreStateClosure? {
    @objc get
    @objc set
  }
  @objc public static var pipRestoreState: OnRewindSDK.OnRewind.PipRestoreStateClosure? {
    @objc get
    @objc set
  }
  @objc public static func set(baseUrl: Swift.String)
  public static func set(streamKey: Swift.String? = nil)
  public static func set(vastUrl: Swift.String? = nil)
  public static func setCustomButtons(buttons: [UIKit.UIView])
  public static func set(isAirplayEnabled: Swift.Bool? = nil, isChromecastEnabled: Swift.Bool? = nil, isPipEnabled: Swift.Bool? = nil)
  public static var hasActivePipSession: Swift.Bool {
    get
  }
  @objc deinit
}
extension OnRewindSDK.OnRewind {
  @objc public static func presentPlayer(withConfigUrl: Foundation.URL, accountKey: Swift.String, fromPresentingViewController: UIKit.UIViewController)
  @objc public static func presentPlayer(withVideoURL: Foundation.URL, isLive: Swift.Bool, fromPresentingViewController: UIKit.UIViewController)
  @objc public static func presentPlayer(withEventId: Swift.String, accountKey: Swift.String, fromPresentingViewController: UIKit.UIViewController)
  public static func presentPlayer(with params: OnRewindSDK.OnRewind.EventParams, from presentingViewController: UIKit.UIViewController, richPlayback: Swift.Bool = true, playerWrapperClosure: OnRewindSDK.OnRewind.PlayerWrapperClosure? = nil, playerUIEventsClosure: OnRewindSDK.OnRewind.PlayerUIEventsClosure? = nil, playerAnalyticsEventsClosure: OnRewindSDK.OnRewind.PlayerAnalyticsEventsClosure? = nil)
  public static func playerController(with params: OnRewindSDK.OnRewind.EventParams, playerWrapperClosure: OnRewindSDK.OnRewind.PlayerWrapperClosure? = nil, playerUIEventsClosure: OnRewindSDK.OnRewind.PlayerUIEventsClosure? = nil, playerAnalyticsEventsClosure: OnRewindSDK.OnRewind.PlayerAnalyticsEventsClosure? = nil) -> UIKit.UIViewController & OnRewindSDK.OnRewindEmbeddedController
}
extension OnRewindSDK.OnRewind {
  public enum Analytics {
  }
  public enum Actions {
  }
  public enum Params {
  }
}
extension OnRewindSDK.OnRewind.Actions {
  public enum Playback : Swift.String {
    case click
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum Module : Swift.String {
    case click
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum Timewheel : Swift.String {
    case click
    case rewind
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum Period : Swift.String {
    case click
    case close
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum Filter : Swift.String {
    case select
    case close
    case confirm
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum Stats : Swift.String {
    case click
    case tab
    case changeTeam
    case changeLineupType
    case changeStage
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum CyclingStats : Swift.String {
    case tabGeneral
    case tabStage
    case team
    case nationality
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
}
extension OnRewindSDK.OnRewind.Params {
  public struct Playback : Swift.CustomStringConvertible {
    public enum Playback : Swift.String, Swift.CustomStringConvertible {
      case play
      case pause
      case rewind
      case live
      public var description: Swift.String {
        get
      }
      public init?(rawValue: Swift.String)
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
    public enum Source : Swift.String, Swift.CustomStringConvertible {
      case home
      case stats
      public var description: Swift.String {
        get
      }
      public init?(rawValue: Swift.String)
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
    public let playback: OnRewindSDK.OnRewind.Params.Playback.Playback
    public let source: OnRewindSDK.OnRewind.Params.Playback.Source
    public var description: Swift.String {
      get
    }
  }
  public enum Module : Swift.String, Swift.CustomStringConvertible {
    case tutorial
    case stats
    case settings
    public var description: Swift.String {
      get
    }
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public struct Timewheel : Swift.CustomStringConvertible {
    public enum Element : Swift.CustomStringConvertible {
      public var description: Swift.String {
        get
      }
      case marker(name: Swift.String)
      case period
      case filter
    }
    public let element: OnRewindSDK.OnRewind.Params.Timewheel.Element?
    public let timestamp: Swift.Int?
    public var description: Swift.String {
      get
    }
  }
  public struct Period : Swift.CustomStringConvertible {
    public let period: Swift.String?
    public var description: Swift.String {
      get
    }
  }
  public struct Filter : Swift.CustomStringConvertible {
    public let team: Swift.String?
    public let marker: Swift.String?
    public var description: Swift.String {
      get
    }
  }
  public struct Stats : Swift.CustomStringConvertible {
    public enum Page : Swift.String {
      case gameStats
      case lineups
      case table
      case latestResults
      case ranking
      case generalRanking
      public init?(rawValue: Swift.String)
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
    public enum Lineup : Swift.String {
      case startup
      case substitutes
      public init?(rawValue: Swift.String)
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
    public enum Stage : Swift.String {
      case group
      case knockout
      case domestic
      public init?(rawValue: Swift.String)
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
    public let page: OnRewindSDK.OnRewind.Params.Stats.Page
    public let lineup: OnRewindSDK.OnRewind.Params.Stats.Lineup?
    public let stage: OnRewindSDK.OnRewind.Params.Stats.Stage?
    public let team: Swift.String?
    public var description: Swift.String {
      get
    }
  }
  public struct CyclingStats : Swift.CustomStringConvertible {
    public let team: Swift.String?
    public let nationality: Swift.String?
    public let general: Swift.String?
    public let stage: Swift.String?
    public var description: Swift.String {
      get
    }
  }
}
extension OnRewindSDK.OnRewind.Analytics {
  public struct Param<Actions, Custom> : Swift.CustomStringConvertible where Actions : Swift.RawRepresentable, Custom : Swift.CustomStringConvertible, Actions.RawValue == Swift.String {
    public var description: Swift.String {
      get
    }
    public let action: Actions
    public let eventId: Swift.String
    public let eventName: Swift.String
    public let custom: Custom
  }
  public enum Event : Swift.CustomStringConvertible {
    public var description: Swift.String {
      get
    }
    case playback(params: OnRewindSDK.OnRewind.Analytics.Param<OnRewindSDK.OnRewind.Actions.Playback, OnRewindSDK.OnRewind.Params.Playback>)
    case module(params: OnRewindSDK.OnRewind.Analytics.Param<OnRewindSDK.OnRewind.Actions.Module, OnRewindSDK.OnRewind.Params.Module>)
    case timewheel(params: OnRewindSDK.OnRewind.Analytics.Param<OnRewindSDK.OnRewind.Actions.Timewheel, OnRewindSDK.OnRewind.Params.Timewheel>)
    case period(params: OnRewindSDK.OnRewind.Analytics.Param<OnRewindSDK.OnRewind.Actions.Period, OnRewindSDK.OnRewind.Params.Period>)
    case filter(params: OnRewindSDK.OnRewind.Analytics.Param<OnRewindSDK.OnRewind.Actions.Filter, OnRewindSDK.OnRewind.Params.Filter>)
    case stats(params: OnRewindSDK.OnRewind.Analytics.Param<OnRewindSDK.OnRewind.Actions.Stats, OnRewindSDK.OnRewind.Params.Stats>)
    case cyclingStats(params: OnRewindSDK.OnRewind.Analytics.Param<OnRewindSDK.OnRewind.Actions.CyclingStats, OnRewindSDK.OnRewind.Params.CyclingStats>)
  }
}
postfix operator %
prefix operator -
extension OnRewindSDK.DioptraError : Swift.Error {
}
public typealias WrapperVoidClosure = () -> Swift.Void
public typealias WrapperProgressClosure = (OnRewindSDK.ProgressEvent) -> Swift.Void
public typealias WrapperPlayerStateClosure = (OnRewindSDK.PlayerState) -> Swift.Void
public typealias WrapperQualitiesClosure = ([OnRewindSDK.VideoQuality]) -> Swift.Void
public typealias WrapperExternalPlaybackClosure = (Swift.Bool) -> Swift.Void
public typealias WrapperOverlayControlsVisibleClosure = (Swift.Bool) -> Swift.Void
public enum ProgressEvent {
  case progress(OnRewindSDK.TimeInSeconds)
  case duration(OnRewindSDK.TimeInSeconds)
  case buffer(OnRewindSDK.TimeInSeconds)
}
public protocol PlayerWrapper : AnyObject {
  var playerView: UIKit.UIView { get }
  var isMuted: Swift.Bool { get set }
  var playbackSpeed: Swift.Double { get set }
  var isPlaybackSpeedSupported: Swift.Bool { get }
  func seek(progress: OnRewindSDK.TimeInSeconds, completion: @escaping OnRewindSDK.WrapperVoidClosure)
  func setPlaybackState(state: OnRewindSDK.PlaybackState)
  func selectVideoQuality(videoQuality: OnRewindSDK.VideoQuality)
  func setDidChangeProgress(closure: @escaping OnRewindSDK.WrapperProgressClosure)
  func setDidChangePlayerState(closure: @escaping OnRewindSDK.WrapperPlayerStateClosure)
  func setDidChangeAvailableVideoQualities(closure: @escaping OnRewindSDK.WrapperQualitiesClosure)
}
extension Swift.String {
  public static var encoding: Swift.String.Encoding {
    get
  }
}
extension UIKit.UIEdgeInsets : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
precedencegroup Additive {
  associativity: left
}
infix operator ++= : Additive
public typealias TimeInSeconds = Swift.Double
public enum PlaybackState {
  case playing
  case paused
  public static func == (a: OnRewindSDK.PlaybackState, b: OnRewindSDK.PlaybackState) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum AdState {
  case idle
  case started
  case finished
  case skiped
  case error
  public static func == (a: OnRewindSDK.AdState, b: OnRewindSDK.AdState) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum DioptraError {
  case connection(error: Swift.Error?)
  case playback(error: Swift.Error?)
}
public enum PlayerState : Swift.Equatable {
  case ready
  case active(state: OnRewindSDK.PlaybackState)
  case ad(state: OnRewindSDK.AdState)
  case idle
  case loading
  case stuck
  case error(error: OnRewindSDK.DioptraError)
  case finished
  public static func == (lhs: OnRewindSDK.PlayerState, rhs: OnRewindSDK.PlayerState) -> Swift.Bool
}
public enum VideoQuality : Swift.Equatable {
  case auto
  case stream(bandwidth: Swift.Double, resolution: CoreGraphics.CGSize, url: Swift.String, description: Swift.String)
  public static func == (a: OnRewindSDK.VideoQuality, b: OnRewindSDK.VideoQuality) -> Swift.Bool
}
extension OnRewindSDK.OnRewind.PlayerUIEvent : Swift.Hashable {}
extension OnRewindSDK.OnRewind.Actions.Playback : Swift.Equatable {}
extension OnRewindSDK.OnRewind.Actions.Playback : Swift.Hashable {}
extension OnRewindSDK.OnRewind.Actions.Playback : Swift.RawRepresentable {}
extension OnRewindSDK.OnRewind.Actions.Module : Swift.Equatable {}
extension OnRewindSDK.OnRewind.Actions.Module : Swift.Hashable {}
extension OnRewindSDK.OnRewind.Actions.Module : Swift.RawRepresentable {}
extension OnRewindSDK.OnRewind.Actions.Timewheel : Swift.Equatable {}
extension OnRewindSDK.OnRewind.Actions.Timewheel : Swift.Hashable {}
extension OnRewindSDK.OnRewind.Actions.Timewheel : Swift.RawRepresentable {}
extension OnRewindSDK.OnRewind.Actions.Period : Swift.Equatable {}
extension OnRewindSDK.OnRewind.Actions.Period : Swift.Hashable {}
extension OnRewindSDK.OnRewind.Actions.Period : Swift.RawRepresentable {}
extension OnRewindSDK.OnRewind.Actions.Filter : Swift.Equatable {}
extension OnRewindSDK.OnRewind.Actions.Filter : Swift.Hashable {}
extension OnRewindSDK.OnRewind.Actions.Filter : Swift.RawRepresentable {}
extension OnRewindSDK.OnRewind.Actions.Stats : Swift.Equatable {}
extension OnRewindSDK.OnRewind.Actions.Stats : Swift.Hashable {}
extension OnRewindSDK.OnRewind.Actions.Stats : Swift.RawRepresentable {}
extension OnRewindSDK.OnRewind.Actions.CyclingStats : Swift.Equatable {}
extension OnRewindSDK.OnRewind.Actions.CyclingStats : Swift.Hashable {}
extension OnRewindSDK.OnRewind.Actions.CyclingStats : Swift.RawRepresentable {}
extension OnRewindSDK.OnRewind.Params.Playback.Playback : Swift.Equatable {}
extension OnRewindSDK.OnRewind.Params.Playback.Playback : Swift.Hashable {}
extension OnRewindSDK.OnRewind.Params.Playback.Playback : Swift.RawRepresentable {}
extension OnRewindSDK.OnRewind.Params.Playback.Source : Swift.Equatable {}
extension OnRewindSDK.OnRewind.Params.Playback.Source : Swift.Hashable {}
extension OnRewindSDK.OnRewind.Params.Playback.Source : Swift.RawRepresentable {}
extension OnRewindSDK.OnRewind.Params.Module : Swift.Equatable {}
extension OnRewindSDK.OnRewind.Params.Module : Swift.Hashable {}
extension OnRewindSDK.OnRewind.Params.Module : Swift.RawRepresentable {}
extension OnRewindSDK.OnRewind.Params.Stats.Page : Swift.Equatable {}
extension OnRewindSDK.OnRewind.Params.Stats.Page : Swift.Hashable {}
extension OnRewindSDK.OnRewind.Params.Stats.Page : Swift.RawRepresentable {}
extension OnRewindSDK.OnRewind.Params.Stats.Lineup : Swift.Equatable {}
extension OnRewindSDK.OnRewind.Params.Stats.Lineup : Swift.Hashable {}
extension OnRewindSDK.OnRewind.Params.Stats.Lineup : Swift.RawRepresentable {}
extension OnRewindSDK.OnRewind.Params.Stats.Stage : Swift.Equatable {}
extension OnRewindSDK.OnRewind.Params.Stats.Stage : Swift.Hashable {}
extension OnRewindSDK.OnRewind.Params.Stats.Stage : Swift.RawRepresentable {}
extension OnRewindSDK.PlaybackState : Swift.Equatable {}
extension OnRewindSDK.PlaybackState : Swift.Hashable {}
extension OnRewindSDK.AdState : Swift.Equatable {}
extension OnRewindSDK.AdState : Swift.Hashable {}
